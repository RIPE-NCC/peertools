#!/usr/bin/env python
'''
Router Automatation for GII
'''

import argparse, re, logging, netaddr
from peertools import cli_utils, routers, utils

class Option(object):
    '''A configuration property'''
    def __init__(self, name, type):
        self.name = name
        self.type = type

    def __set__(self, instance, value):
        if value != None:
            value = self.type(value)

        setattr(instance, '_' + self.name, value)
        return value

    def __get__(self, instance, owner):
        value = getattr(instance, '_' + self.name)
        
        if value != None:
            print '> using %s as %s' % (value, self.name)
            return value
        
        raw = raw_input('> QUESTION %s: ' % self.name).strip()
        return self.__set__(instance, raw)

class Args(object):
    '''
    Holds the configuration and asks for more parameters on demand
    '''
    def __init__(self):
        self._parse_args()
    
    def _parse_args(self):
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('device')
        parser.add_argument('our_asn')
        parser.add_argument('cmd', choices='peers addpeer delpeer peerinfo setup hardware noop'.split())
        parser.add_argument('--askpass', action='store_true')
        parser.add_argument('--ip', type=netaddr.IPAddress, help='peer IP')
        parser.add_argument('--asn', help='peer asn')
        parser.add_argument('--group', help='bgp group')
        parser.add_argument('--desc', help='peer description')
        parser.add_argument('-v', '--verbose', action='store_true', default=False)

        parser.parse_args(namespace=self)

    device = Option('device', str)
    our_asn = Option('our_asn', int)
    cmd = Option('cmd', str)
    ip = Option('ip', netaddr.IPAddress)
    group = Option('group', str)
    desc = Option('desc', str)
    asn = Option('asn', int)
    verbose = Option('verbose', bool)

###############################################
# Main
###############################################

def main():
    logging.basicConfig(level=logging.INFO)
    args = Args()
    if args.verbose:
        logging.getLogger().level = logging.DEBUG

    cmd = args.cmd

    password = cli_utils.ask_pass() if args.askpass else None
    handle = routers.RouterHandle(args.device, args.our_asn, password)
    with handle as router:
        if cmd == 'peers':
            print utils.encode(router.peers())
        elif cmd == 'addpeer':
            print utils.encode(router.peer_info(args.ip))
            print router.groups()
            conf = router.add_peer(args.group, args.ip, args.asn, args.desc)
            if cli_utils.confirm_config(conf):
                router.apply_config(conf)
        elif cmd == 'delpeer':
            print router.peer_info(args.ip)
            conf = router.del_peer(args.group, args.ip)
            if cli_utils.confirm_config(conf):
                router.apply_config(conf)
        elif cmd == 'peerinfo':
            print router.peer_info(args.ip)
        elif cmd == 'setup':
            router.setup(ask_pass('enable password'))
        elif cmd == 'noop':
            router.cmd('')
        elif cmd == 'hardware':
            print router.hardware()
        else:
            raise RuntimeError('unknown command: %s' % args.cmd)
        
    handle.close()

if __name__== '__main__':
    main()

